Endpoint slug,Type,Use case,Scenario,Arguments,Returns,Description,Data sensitivity,summary,operationId,responseOK
API tag: org,,,,,,,,,,
CRUDL for Policy object,,,,,,,,,,
/org/policy/,GET,"UC-C-PIC-A-001, UC-C-PIC-A-002",,PolicyFilter,Policy<list>,LIST - Fetches list of readable Policy objects,FALSE,Returns a list of readable Policy objects,adminListPolicy,A list of Policy objects readable for the current session's credentials.
/org/policy/,POST,UC-C-PIC-A-001,,Policy,"Policy, Revision",CREATE - Creates a new Policy object and returns the new object and a PolicyRevision,FALSE,,adminCreatePolicy,"A set consisting of the new Policy object created, together with the initial Revision object."
/org/policy/{id}/,GET,UC-C-PIC-A-003,,PolicyFilter,"Policy, Revision","READ - get a Policy object + latest Revision. If a PolicyFilter is supplied and contains a revision_id, then this specific revision is returned.",FALSE,,adminReadPolicy,
/org/policy/{id}/revisions/,GET,UC-C-PIC-A-003,,,"Policy, Revision<List>",LIST - returns a Policy object with a list of all Revisions,FALSE,,adminListPolicyRevisions,
/org/policy/{id}/,PUT,UC-C-PIC-A-002,,Policy,"Policy, Revision","UPDATE - Updates an existing Policy object, returning the updated version and a new revision. Updating a Policy does not affect existing references in Agreement, the new revision should be specified for Agreement.",FALSE,,adminUpdatePolicy,
/org/policy/{id}/,DELETE,UC-C-PIC-A-004,,,Revision,"DELETE - Deletes an existing Policy object, returning the updated version and a new revision. Deleting a Policy is not possible if it's associated with active Agreement.",FALSE,,adminDeletePolicy,
CRUDL for Agreement object,,,,,,,FALSE,,,
/org/agreement/,GET,UC-C-PIC-A-003,,AgreementFilter,Agreement<List>,,FALSE,,adminListAgreement,
/org/agreement/{id}/,GET,UC-C-PIC-A-003,,,"Agreement, Revision",READ - fetches the latest version of an Agreement,FALSE,,adminReadAgreement,
/org/agreement/,POST,UC-C-PIC-A-001,,Agreement,"Agreement, Revision",CREATE - A new Agreement object is created and returned together with AgreementRevision,FALSE,,adminCreateAgreement,
/org/agreement/{id}/,PUT,UC-C-PIC-A-002,,Agreement,"Agreement, Revision",UPDATE - An existing Agreement object is created and returned together with AgreementRevision,FALSE,,adminUpdateAgreement,
/org/agreement/,DELETE,UC-C-PIC-A-004,,,Revision,,FALSE,,adminDeleteAgreement,
Limited ConsentRecord operations,,,,,,,,,,
/org/record/{id}/,GET,,,,ConsentRecord,READ - fetches a ConsentRecord,TRUE,,adminReadConsentRecord,
/org/record/{id}/withdraw/,PUT,,,,ConsentRecord,"UPDATE - invalidates/withdraws a ConsentRecord, for usage in unconventional withdrawal of consent, for instance if withdrawal happens through an email or phone call.",TRUE,,adminUpdateConsentRecord,
"CRUD for ""Individual"" object",,,,,,,TRUE,,,
/org/individual/,POST,,,RegistryReference,Individual,CREATE - Creates an Individual in the Consent system,TRUE,,adminIndividualCreate,
/org/individual/{id}/,GET,,,,Individual,READ - Fetch an Individual in the Consent system,TRUE,,adminIndividualRead,
/org/individual/{id}/,PUT,,,,Individual,UPDATE - Updates an Individual in the Consent system,TRUE,,adminIndividualUpdate,
/org/individual/{id}/,DELETE,,,,Individual,DELETE - entirely removes an individual from the system and cascades necessary actions to related ConsentRecord objects,TRUE,,adminIndividualDelete,
,,,,,,,,,,
,,,,,,,,,,
API tag: dataconsumer,,,,,,,,,,
/dataconsumer/config/agreement/,GET,,1.1,AgreementFilter,Agreement<List>,LIST - Fetch agreements,FALSE,,,
/dataconsumer/consent/,GET,,"3.1, 1.2",ConsentRecordFilter,ConsentRecord<List>,"LIST - Fetch consent records. For a given Agreement and Individual, query if consent exists",TRUE,,,
/dataconsumer/agreement/{id}/,GET,,1.2,,Agreement,READ - Fetch a specific agreement,FALSE,,,
/dataconsumer/agreement-choice/{id}/,GET,,,,AgreementChoice,READ - Fetch an AgreementChoice,FALSE,,,
,,,,,,,,,,
API tag: individual,,,,,,,,,,
/individual/{pii}/agreement/{id}/,POST,UC-C-PIC-I-002,1.2,"Individual, Agreement, Revision","ConsentRecord, Revision","CREATE - For a particular Individual and a particular Agreement, create a new Consent Record pointing to the current Revision of a given Agreement",TRUE,,,
/individual/{pii}/consent-record/{id}/,PUT,UC-C-PIC-I-003,,"Individual, Agreement, Revision","ConsentRecord, Revision",UPDATE,TRUE,,,
/individual/{pii}/consent-record/{id}/withdraw/,PUT,UC-C-PIC-I-003,,Individual,"ConsentRecord, Revision",UPDATE,TRUE,,,
/individual/{pii}/agreement/,GET,UC-C-PIC-I-001,,,"ConsentRecord<list>, Agreement<list>",LIST,TRUE,,,
/individual/{pii}/,DELETE,,,,,"DELETE - Cascading delete operation for Right To Be Forgotten, deletes all Consent Records that shall not be retained and have a ""forgettable"" Agreement.",TRUE,,,
,,,,,,,,,,
API tag: auditor,,,,,,,,,,
,,,,,,,,,,
,,,,,,,,,,
API tag: notification,,,,,,,,,,
,,,,,,,,,,
API tag: callback,,,,,,,,,,
/callback/registry-bb/revision-saved/{id}/,,,,RegistryReference,,"For asynchronous flows, the Consenent Management BB will require a callback from the Registry BB when saving and updating records on an Individual.",FALSE,,,
,,,,,,,,,,
,,,,,,,,,,
Questions / notes,,,,,,,,,,
"Sensitive/Personal data - Make Individual ID stored as some kind of anonymous token in HTTP headers, session state or like-wise. We should avoid spilling over individually identifiable data in HTTP server logs etc.",,,,,,,,,,
"Right To Be Forgotten, all the rights actually...",,,,,,,,,,
List filters and pagination,,,,,,,,,,
"Should we have CRUD for ""Individual""?",,,,,,,,,,
"Is there a ""Registry BB"" (used in UC sequence diagrams) -- or just a Registration BB?",,,,,,,,,,
TODO,,,,,,,,,,
m2m fields: Policy <> Agreement,,,,,,,,,,
atomic endpoints: List of ConsentRecordChoice and Policy,,,,,,,,,,
"Return values, especially lists in return values",,,,,,,,,,